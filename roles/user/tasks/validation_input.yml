---
- name: Force reset user_changed
  ansible.builtin.debug:
    msg: fact user_changed has been reseted
  when: user_changed
  notify: user_changed_need_reset

- name: Check GID
  assert:
    that:
      - user_gid | type_debug == "int"
      - user_gid >= 0
    fail_msg: "User GID must be a positive integer"
    success_msg: "User GID is Ok"
  when: user_gid is not none

- name: Harvest bdd group
  become: true
  become_method: "{{ custom_become_method }}"
  getent:
    database: group
  when: user_gid is not none

- name: Check if gid present in group bdd
  assert:
    that:
      - "{{ getent_group[item].1 }} >= 0"
    fail_msg: "Gid already exist"
    success_msg: "Gid do not exist, no problem"
    quiet: true
  loop: "{{ getent_group | list }}"
  when:
    - user_gid is not none

- name: Check UID
  assert:
    that:
      - user_uid | type_debug == "int"
      - user_uid >= 0
    fail_msg: "User UID must be a positive integer"
    success_msg: "User UID is Ok"
    quiet: true
  when: user_uid is not none

- name: Harvest bdd user
  become: true
  become_method: "{{ custom_become_method }}"
  getent:
    database: passwd
  when: user_uid is not none

- name: Check if UID present in user bdd
  assert:
    that:
      - "{{ getent_passwd[item].1 }} >= 0"
    fail_msg: "Uid already exist"
    success_msg: "Uid do not exist or unchanged, no problem"
    quiet: true
  loop: "{{ getent_passwd | list }}"
  when:
    - user_uid is not none